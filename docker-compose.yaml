version: '3.8'

services:
  # Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKAJS_NO_PARTITIONER_WARNING: 1
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-setup:
    image: node:18-alpine
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./kafka-setup:/app
    working_dir: /app
    command: [
      "sh", "-c", 
      "echo 'Waiting for Kafka to be ready...' && 
       sleep 20 && 
       npm install && 
       npm run build && 
       npm start"
    ]
    networks:
      - microservices-network

  postgres:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: adminpassword
      POSTGRES_DB: microservices
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-setup/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d microservices"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.dev
      args:
        SERVICE_NAME: api-gateway
    ports:
      - "4000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      SERVICE_NAME: api-gateway
      PAYMENTS_SERVICE_URL: http://payments-service:3000
      SALES_SERVICE_URL: http://sales-service:3000
      PURCHASING_SERVICE_URL: http://purchasing-service:3000
      INVENTORY_SERVICE_URL: http://inventory-service:3000
      CUSTOMER_SERVICE_URL: http://customer-activity-service:3000
      USER_SERVICE_URL: http://user-service:3000
      LOG_LEVEL: debug
    volumes:
      - ./api-gateway:/app/api-gateway
      - ./shared:/app/shared
      - /app/api-gateway/node_modules
      - /app/shared/node_modules
    depends_on:
      - user-service
    networks:
      - microservices-network

  # Active Microservices
  user-service:
    build:
      context: .
      dockerfile: Dockerfile.dev
      args:
        SERVICE_NAME: user-service
    ports:
      - "3006:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      SERVICE_NAME: user-service
      KAFKA_BROKERS: kafka:29092
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: adminpassword
      POSTGRES_DB: microservices
      JWT_SECRET: dev-jwt-secret
      AUTH_EXPIRY: 24h
      LOG_LEVEL: debug
      KAFKAJS_NO_PARTITIONER_WARNING: 1
    volumes:
      - ./user-service:/app/user-service
      - ./shared:/app/shared
      - /app/user-service/node_modules
      - /app/shared/node_modules
    command: >
      sh -c "cd /app/user-service && 
             rm -rf node_modules/bcrypt && 
             npm install bcrypt && 
             npm run start:dev"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - microservices-network

  # Future Microservices - Currently commented out
  # payments-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #     args:
  #       SERVICE_NAME: payments-service
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     NODE_ENV: development
  #     PORT: 3000
  #     SERVICE_NAME: payments-service
  #     KAFKA_BROKERS: kafka:29092
  #     POSTGRES_HOST: postgres
  #     POSTGRES_PORT: 5432
  #     POSTGRES_USER: admin
  #     POSTGRES_PASSWORD: adminpassword
  #     POSTGRES_DB: microservices
  #     LOG_LEVEL: debug
  #   volumes:
  #     - ./payments-service:/app/payments-service
  #     - ./shared:/app/shared
  #     - /app/payments-service/node_modules
  #     - /app/shared/node_modules
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - microservices-network

  # sales-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #     args:
  #       SERVICE_NAME: sales-service
  #   ports:
  #     - "3002:3000"
  #   environment:
  #     NODE_ENV: development
  #     PORT: 3000
  #     SERVICE_NAME: sales-service
  #     KAFKA_BROKERS: kafka:29092
  #     POSTGRES_HOST: postgres
  #     POSTGRES_PORT: 5432
  #     POSTGRES_USER: admin
  #     POSTGRES_PASSWORD: adminpassword
  #     POSTGRES_DB: microservices
  #     LOG_LEVEL: debug
  #   volumes:
  #     - ./sales-service:/app/sales-service
  #     - ./shared:/app/shared
  #     - /app/sales-service/node_modules
  #     - /app/shared/node_modules
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - microservices-network

  # purchasing-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #     args:
  #       SERVICE_NAME: purchasing-service
  #   ports:
  #     - "3003:3000"
  #   environment:
  #     NODE_ENV: development
  #     PORT: 3000
  #     SERVICE_NAME: purchasing-service
  #     KAFKA_BROKERS: kafka:29092
  #     POSTGRES_HOST: postgres
  #     POSTGRES_PORT: 5432
  #     POSTGRES_USER: admin
  #     POSTGRES_PASSWORD: adminpassword
  #     POSTGRES_DB: microservices
  #     LOG_LEVEL: debug
  #   volumes:
  #     - ./purchasing-service:/app/purchasing-service
  #     - ./shared:/app/shared
  #     - /app/purchasing-service/node_modules
  #     - /app/shared/node_modules
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - microservices-network

  # inventory-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #     args:
  #       SERVICE_NAME: inventory-service
  #   ports:
  #     - "3004:3000"
  #   environment:
  #     NODE_ENV: development
  #     PORT: 3000
  #     SERVICE_NAME: inventory-service
  #     KAFKA_BROKERS: kafka:29092
  #     POSTGRES_HOST: postgres
  #     POSTGRES_PORT: 5432
  #     POSTGRES_USER: admin
  #     POSTGRES_PASSWORD: adminpassword
  #     POSTGRES_DB: microservices
  #     LOG_LEVEL: debug
  #   volumes:
  #     - ./inventory-service:/app/inventory-service
  #     - ./shared:/app/shared
  #     - /app/inventory-service/node_modules
  #     - /app/shared/node_modules
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - microservices-network

  # customer-activity-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #     args:
  #       SERVICE_NAME: customer-activity-service
  #   ports:
  #     - "3005:3000"
  #   environment:
  #     NODE_ENV: development
  #     PORT: 3000
  #     SERVICE_NAME: customer-activity-service
  #     KAFKA_BROKERS: kafka:29092
  #     POSTGRES_HOST: postgres
  #     POSTGRES_PORT: 5432
  #     POSTGRES_USER: admin
  #     POSTGRES_PASSWORD: adminpassword
  #     POSTGRES_DB: microservices
  #     LOG_LEVEL: debug
  #   volumes:
  #     - ./customer-activity-service:/app/customer-activity-service
  #     - ./shared:/app/shared
  #     - /app/customer-activity-service/node_modules
  #     - /app/shared/node_modules
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - microservices-network

  # Development Tools
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - microservices-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres-data: